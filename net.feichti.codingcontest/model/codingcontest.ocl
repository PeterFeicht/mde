import 'codingcontest.ecore'

package codingcontest

context Contest
	
	-- XXX Should this be modeled instead of being a constraint?
	inv HasTheme: theme <> null and theme.size() > 0
	
	-- There should be unique, consecutive levels starting at 0 or 1
	inv NoDuplicateLevels: levels->isUnique(it: Level | it.number)
	inv ConsecutiveLevels:
		let numbers = levels->collect(it: Level | it.number) in
		(numbers->max() - numbers->min() + 1) = levels->size()
	inv MinLevel('The first level should have number 0 or 1'):
		let first = levels->sortedBy(it: Level | it.number)->first()?.number in
		first = 0 or first = 1
	
	-- Each problem must be available in every team's language
	inv NoMissingLang:
		let needed = entries->collect(it: Entry | it.language)->asSet() in
		levels->forAll(level: Level | (needed - level.problems->collect(it: LanguageToProblemMap | it.key)->asSet())->isEmpty())

context Coder
	
	inv HasName('Coder "' + self.toString() + '" must have a name'):
		name <> null and name.size() > 0
		
	inv PositiveAge('Age must be positive'):
		age > 0
	inv StillAlive('I don\'t believe you are ' + age.toString() + ' years old'):
		age < 150

context Organizer
	
	inv HasName('Organizer "' + self.toString() + '" must have a name'):
		name <> null and name.size() > 0

endpackage
